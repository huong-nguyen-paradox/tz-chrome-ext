/*
 * Chrome Extension: Selected Text Display Example
 *
 * This extension allows the user to select text on a webpage and
 * displays that selected text in a popup when the extension icon is clicked.
 *
 * File Structure:
 * selected-text-display/
 * ├── manifest.json
 * ├── popup.html
 * ├── popup.js
 * ├── content.js
 * └── images/
 * ├── icon-16.png
 * ├── icon-48.png
 * └── icon-128.png
 *
 * To run this extension:
 * 1. Create a folder named `selected-text-display`.
 * 2. Save the content of `manifest.json`, `popup.html`, `popup.js`, and `content.js`
 * into files with those exact names within the `selected-text-display` folder.
 * 3. Create an `images` subfolder inside `selected-text-display`.
 * 4. Place placeholder icon images (PNG format) named `icon-16.png`, `icon-48.png`,
 * and `icon-128.png` in the `images` folder. You can use simple colored squares.
 * (e.g., https://placehold.co/128x128/007bff/ffffff?text=SEL for 128x128)
 * 5. Open Chrome and go to `chrome://extensions`.
 * 6. Enable "Developer mode" (top right corner).
 * 7. Click "Load unpacked" and select your `selected-text-display` folder.
 *
 * How to use after loading:
 * 1. Go to any webpage with text.
 * 2. Select some text using your mouse.
 * 3. Click the extension's icon in the Chrome toolbar.
 * 4. The popup will appear, showing the text you selected.
 */

// --- 1. manifest.json ---
// This file describes your extension. It's crucial for Chrome to understand
// what your extension is, what it can do, and what files it uses.
// Save this as `manifest.json` in the root of your extension folder.
/*
{
  "manifest_version": 3,
  "name": "Selected Text Viewer",
  "version": "1.0",
  "description": "Displays selected text in a popup.",
  "icons": {
    "16": "images/icon-16.png",
    "48": "images/icon-48.png",
    "128": "images/icon-128.png"
  },
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "images/icon-16.png",
      "24": "images/icon-24.png",
      "32": "images/icon-32.png"
    }
  },
  "permissions": [
    "activeTab",  // Allows temporary access to the currently active tab when invoked
    "scripting"   // Required to programmatically inject content scripts
  ]
}
*/

// --- 2. popup.html ---
// This HTML file defines the user interface for the extension's popup.
// It will display the selected text.
// Save this as `popup.html` in the root of your extension folder.
/*
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Selected Text</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <style>
        /* Apply the Inter font and basic styling */
        body {
            font-family: 'Inter', sans-serif;
            width: 300px; /* Fixed width for the popup */
            padding: 20px;
            text-align: center;
            background-color: #f0f4f8; /* Light blue-grey background */
            border-radius: 10px; /* More rounded corners */
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15); /* Stronger shadow */
            color: #333;
            display: flex;
            flex-direction: column;
            gap: 15px;
            align-items: center;
            justify-content: center;
            min-height: 100px; /* Minimum height for a better look */
        }
        h2 {
            color: #2c3e50; /* Darker header color */
            margin: 0; /* Remove default margin */
            font-size: 1.4em;
        }
        #selectedTextDisplay {
            min-height: 50px; /* Ensure space for text */
            padding: 10px 15px;
            background-color: #ffffff;
            border: 1px solid #dcdfe6;
            border-radius: 8px;
            width: 100%;
            box-sizing: border-box; /* Include padding in width */
            text-align: left;
            word-wrap: break-word; /* Ensure long words break */
            font-size: 1em;
            color: #555;
            overflow-y: auto; /* Enable scrolling for long text */
            max-height: 150px; /* Limit height for scrollable area */
        }
        #loadingMessage {
            font-style: italic;
            color: #888;
        }
    </style>
</head>
<body>
    <h2>Selected Text:</h2>
    <p id="loadingMessage">Loading selected text...</p>
    <div id="selectedTextDisplay"></div>

    <!-- Link to our JavaScript file.
         The 'defer' attribute ensures the HTML is parsed before the script runs. -->
    <script src="popup.js" defer></script>
</body>
</html>
*/

// --- 3. popup.js ---
// This script runs when the popup (`popup.html`) is opened.
// It requests the selected text from the active tab and displays it.
// Save this as `popup.js` in the root of your extension folder.
/*
// Get references to HTML elements in popup.html
const selectedTextDisplay = document.getElementById('selectedTextDisplay');
const loadingMessage = document.getElementById('loadingMessage');

// Function to handle the response from the content script
function handleMessage(message, sender, sendResponse) {
    if (message.type === 'selectedText') {
        // Hide loading message and display the selected text
        loadingMessage.style.display = 'none';
        if (message.text && message.text.trim() !== '') {
            selectedTextDisplay.textContent = message.text;
        } else {
            selectedTextDisplay.textContent = 'No text was selected.';
            selectedTextDisplay.style.color = '#dc3545'; // Red for "no text"
        }
    }
}

// Add a listener for messages from content scripts
chrome.runtime.onMessage.addListener(handleMessage);

// When the popup opens, we need to execute the content script
// in the currently active tab to get the selected text.
// We use `chrome.scripting.executeScript` for Manifest V3.
chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
    if (tabs.length === 0) {
        // No active tab found (e.g., if popup opened on a special Chrome page)
        loadingMessage.style.display = 'none';
        selectedTextDisplay.textContent = 'Cannot access selected text on this page.';
        selectedTextDisplay.style.color = '#ffc107'; // Yellow for warning
        return;
    }

    const activeTabId = tabs[0].id;

    chrome.scripting.executeScript(
        {
            target: { tabId: activeTabId },
            files: ['content.js'] // Path to the content script file
        },
        () => {
            // Check for any errors during script injection
            if (chrome.runtime.lastError) {
                console.error('Script injection failed:', chrome.runtime.lastError.message);
                loadingMessage.style.display = 'none';
                selectedTextDisplay.textContent = 'Error: Could not inject script.';
                selectedTextDisplay.style.color = '#dc3545';
                return;
            }
            console.log('content.js injected into tab:', activeTabId);
            // After content.js is injected, it will automatically send back the selected text.
            // The handleMessage function will then process it.
        }
    );
});
*/

// --- 4. content.js ---
// This script is injected into the active webpage.
// It gets the currently selected text and sends it back to the popup.
// Save this as `content.js` in the root of your extension folder.
/*
// Function to get the selected text from the current page
function getSelectedText() {
    return window.getSelection().toString();
}

// Get the selected text
const selectedText = getSelectedText();

// Send the selected text back to the popup (or any listening part of the extension)
// The 'type' property helps distinguish different messages.
chrome.runtime.sendMessage({ type: 'selectedText', text: selectedText });

console.log('Content script executed. Selected text:', selectedText);
*/

// --- 5. images/ (folder) ---
// Create a subfolder named `images` in your extension's root directory.
// Place three small square PNG image files inside it, named:
// - icon-16.png (e.g., 16x16 pixels)
// - icon-48.png (e.g., 48x48 pixels)
// - icon-128.png (e.g., 128x128 pixels)
// You can use any simple image, or even create blank colored squares for testing.
// For example, you can use online tools or image editors to create these.
// Example for icon-128.png: https://placehold.co/128x128/4CAF50/ffffff?text=SEL
// Example for icon-48.png: https://placehold.co/48x48/4CAF50/ffffff?text=SEL
// Example for icon-16.png: https://placehold.co/16x16/4CAF50/ffffff?text=SEL
