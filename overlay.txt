// This is the service worker script.
// It listens for when the extension icon is clicked, then injects the UI and logic
// for the timezone converter into the active tab. All animations and related CSS
// have been removed.

console.log("Background script has started to load for Timezone Converter (No Animation)!");

// Listen for clicks on the extension's toolbar icon
chrome.action.onClicked.addListener((tab) => {
    console.log('Extension icon clicked on tab.id = ', tab.id, 'tab.url = ', tab.url);

    // Execute the function that creates/manages the timezone converter overlay
    chrome.scripting.executeScript(
        {
            target: {tabId: tab.id },
            function: createOrUpdateTimeConverterOverlay // This function will be injected and run on the page
        },
        (injectionResults) => {
            if (chrome.runtime.lastError) {
                console.error('Script injection failed:', chrome.runtime.lastError.message);
                return;
            }
            console.log('Timezone converter script injected into tab:', tab.id);
            // No result is expected back from this injection as it directly manipulates the DOM
        }
    );
});

// This function will be executed in the context of the webpage (content script's isolated world).
// It creates or updates the timezone converter overlay.
function createOrUpdateTimeConverterOverlay() {
    const OVERLAY_ID = 'extension-timezone-converter-overlay';
    const TIME_INPUT_ID = OVERLAY_ID + '-time-input';
    const SOURCE_TZ_SELECT_ID = OVERLAY_ID + '-source-tz-select';
    const CONVERT_BUTTON_ID = OVERLAY_ID + '-convert-btn';
    const RESULTS_AREA_ID = OVERLAY_ID + '-results';
    const CLOSE_BUTTON_ID = OVERLAY_ID + '-close-btn';

    let overlay = document.getElementById(OVERLAY_ID);

    // List of common IANA timezones (you can expand this)
    const timezones = [
        "America/New_York",
        "America/Chicago",
        "America/Los_Angeles",
        "Europe/London",
        "Europe/Berlin",
        "Asia/Tokyo",
        "Asia/Shanghai",
        "Australia/Sydney",
        "UTC",
        "Asia/Kolkata",
        "Asia/Dubai",
        "Europe/Paris",
        "Canada/Atlantic",
        "Mexico/BajaNorte"
    ];

    // Check if Inter font is already loaded
    if (!document.getElementById('inter-font-link')) {
        const interLink = document.createElement('link');
        interLink.id = 'inter-font-link';
        interLink.rel = 'stylesheet';
        interLink.href = 'https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap';
        document.head.appendChild(interLink);
    }

    if (!overlay) {
        // If it doesn't exist, create it
        overlay = document.createElement('div');
        overlay.id = OVERLAY_ID;
        // Removed 'animation: fadeIn ...'
        overlay.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            width: 350px; /* Slightly wider for the converter */
            max-width: 95vw; /* Responsive width */
            background-color: #ffffff;
            border: 1px solid #e0e0e0;
            border-radius: 12px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            padding: 20px;
            z-index: 2147483647; /* High z-index to ensure it's on top */
            font-family: 'Inter', sans-serif;
            color: #333;
            display: flex;
            flex-direction: column;
            gap: 15px;
            box-sizing: border-box; /* Include padding in width */
            position: relative; /* For absolute positioning of close button */
        `;

        // Basic styling for inputs and buttons (no animations/transitions here either)
        // This style block is for elements within the overlay, not for the overlay itself's animations
        if (!document.getElementById('extension-overlay-internal-styles')) {
            const style = document.createElement('style');
            style.id = 'extension-overlay-internal-styles';
            style.textContent = `
                #${OVERLAY_ID} input[type="text"],
                #${OVERLAY_ID} select {
                    width: 100%;
                    padding: 10px;
                    border: 1px solid #ccc;
                    border-radius: 6px;
                    box-sizing: border-box;
                    font-family: 'Inter', sans-serif;
                    font-size: 0.95em;
                }
                #${OVERLAY_ID} button {
                    background-color: #007bff; /* Primary button color */
                    color: white;
                    border: none;
                    padding: 10px 15px;
                    border-radius: 6px;
                    cursor: pointer;
                    font-size: 1em;
                    display: block; /* Full width for the button */
                    width: 100%;
                    box-sizing: border-box;
                    /* Removed transition for no animation */
                }
                #${OVERLAY_ID} button:hover {
                    background-color: #0056b3; /* Darker blue on hover */
                }
                /* Removed :active styles */
            `;
            document.head.appendChild(style);
        }


        // Add header
        const header = document.createElement('h3');
        header.textContent = 'Timezone Converter';
        header.style.cssText = `
            margin: 0;
            color: #4a5568;
            font-size: 1.3em;
            text-align: left;
            padding-right: 30px; /* Space for close button */
            margin-bottom: 10px;
        `;
        overlay.appendChild(header);

        // Add close button
        const closeButton = document.createElement('button');
        closeButton.id = CLOSE_BUTTON_ID;
        closeButton.textContent = 'X';
        // Removed transition for no animation
        closeButton.style.cssText = `
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            font-size: 1.2em;
            cursor: pointer;
            color: #888;
            padding: 5px;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
        `;
        // Removed onmouseover/onmouseout for no animation
        closeButton.onclick = () => {
            overlay.remove(); // Direct removal, no fadeOut animation
        };
        overlay.appendChild(closeButton);

        // --- Input Section ---
        const inputSection = document.createElement('div');
        inputSection.style.cssText = `
            display: flex;
            flex-direction: column;
            gap: 10px;
            width: 100%;
        `;

        // Time Input
        const timeLabel = document.createElement('label');
        timeLabel.textContent = 'Time:';
        timeLabel.htmlFor = TIME_INPUT_ID;
        timeLabel.style.cssText = `
            font-size: 0.9em;
            color: #555;
            display: block; /* Ensure it takes full width above input */
            margin-bottom: 4px;
        `;
        inputSection.appendChild(timeLabel);

        const timeInput = document.createElement('input');
        timeInput.type = 'text';
        timeInput.id = TIME_INPUT_ID;
        timeInput.placeholder = 'e.g., 9:00 AM or 14:30';
        // Input styles handled by the internal style block
        inputSection.appendChild(timeInput);

        // Source Timezone Select
        const sourceTzLabel = document.createElement('label');
        sourceTzLabel.textContent = 'From Timezone:';
        sourceTzLabel.htmlFor = SOURCE_TZ_SELECT_ID;
        sourceTzLabel.style.cssText = `
            font-size: 0.9em;
            color: #555;
            display: block;
            margin-bottom: 4px;
            margin-top: 10px; /* Space above this label */
        `;
        inputSection.appendChild(sourceTzLabel);

        const sourceTzSelect = document.createElement('select');
        sourceTzSelect.id = SOURCE_TZ_SELECT_ID;
        // Select styles handled by the internal style block
        timezones.forEach(tz => {
            const option = document.createElement('option');
            option.value = tz;
            option.textContent = tz;
            sourceTzSelect.appendChild(option);
        });
        // Attempt to pre-select local timezone
        try {
            const localTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
            if (timezones.includes(localTimeZone)) {
                sourceTzSelect.value = localTimeZone;
            } else {
                 const matchingTZ = timezones.find(tz => tz.includes(localTimeZone.split('/')[0]) || tz.includes(localTimeZone.split('/')[1]));
                 sourceTzSelect.value = matchingTZ || "UTC";
            }
        } catch (e) {
            console.warn("Could not determine local timezone:", e);
            sourceTzSelect.value = "UTC"; // Default to UTC if detection fails
        }

        inputSection.appendChild(sourceTzSelect);
        overlay.appendChild(inputSection);

        // Convert Button
        const convertButton = document.createElement('button');
        convertButton.id = CONVERT_BUTTON_ID;
        convertButton.textContent = 'Convert Time';
        // Button styles handled by the internal style block
        overlay.appendChild(convertButton);

        // --- Results Section ---
        const resultsArea = document.createElement('div');
        resultsArea.id = RESULTS_AREA_ID;
        resultsArea.style.cssText = `
            background-color: #f8f8f8;
            border: 1px solid #eee;
            padding: 15px;
            border-radius: 8px;
            min-height: 80px;
            max-height: 250px;
            overflow-y: auto;
            text-align: left;
            word-wrap: break-word;
            font-size: 0.95em;
            line-height: 1.6;
            color: #555;
            flex-grow: 1;
        `;
        resultsArea.innerHTML = '<span style="color: #6c757d;">Enter time and click Convert.</span>'; // Neutral gray for initial message
        overlay.appendChild(resultsArea);

        document.body.appendChild(overlay);

        // --- Event Listener for Conversion ---
        convertButton.addEventListener('click', () => {
            const inputTime = timeInput.value.trim();
            const sourceTz = sourceTzSelect.value;
            const resultsDiv = document.getElementById(RESULTS_AREA_ID);

            if (!inputTime) {
                resultsDiv.innerHTML = '<span style="color: #dc3545; font-weight: bold;">Please enter a time to convert.</span>';
                return;
            }

            resultsDiv.innerHTML = '<span style="color: #007bff;">Converting...<br></span>'; // Blue for converting message

            try {
                // Determine a base date for parsing (today)
                let tempDate = new Date(); // Represents current local date and time

                const timeRegex = /(\d{1,2}):(\d{2})\s*(AM|PM)?/i;
                const match = inputTime.match(timeRegex);

                if (!match) {
                    resultsDiv.innerHTML = '<span style="color: #dc3545; font-weight: bold;">Invalid time format. Use HH:MM or HH:MM AM/PM.</span>';
                    return;
                }

                let hours = parseInt(match[1]);
                const minutes = parseInt(match[2]);
                const ampm = match[3] ? match[3].toUpperCase() : '';

                if (ampm === 'PM' && hours < 12) {
                    hours += 12;
                } else if (ampm === 'AM' && hours === 12) {
                    hours = 0; // 12 AM is 00:00
                }

                if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {
                    resultsDiv.innerHTML = '<span style="color: #dc3545; font-weight: bold;">Invalid time values.</span>';
                    return;
                }

                tempDate.setHours(hours, minutes, 0, 0); // Set time on today's date (local timezone)

                let output = `<b style="color: #333;">Input Time (${sourceTz}): ${inputTime}</b><br><br><b style="color: #333;">Converted Times:</b><br>`;

                // Sort timezones by their current offset for a more logical display
                const sortedTimezones = timezones.slice().sort((a, b) => {
                    // This uses a simple way to get an offset string for sorting; not a true numeric offset.
                    // For robust offset comparison, a library would be better.
                    const offsetA = new Date().toLocaleString('en', { timeZone: a, timeZoneName: 'shortOffset' }).match(/GMT([+-]\d+)/)?.[1] || 0;
                    const offsetB = new Date().toLocaleString('en', { timeZone: b, timeZoneName: 'shortOffset' }).match(/GMT([+-]\d+)/)?.[1] || 0;
                    return parseInt(offsetA) - parseInt(offsetB);
                });

                sortedTimezones.forEach(targetTz => {
                    if (targetTz === sourceTz) {
                         return; // Don't show conversion if target is same as source
                    }

                    const options = {
                        hour: '2-digit',
                        minute: '2-digit',
                        second: '2-digit',
                        hour12: true, // Use 12-hour format with AM/PM
                        timeZoneName: 'short', // e.g., "EDT", "PST"
                        timeZone: targetTz
                    };
                    const formatter = new Intl.DateTimeFormat('en-US', options);

                    // Format the *same* `tempDate` object using the `targetTz`
                    const convertedTime = formatter.format(tempDate);
                    output += `<span style="display: block; padding-top: 2px; padding-bottom: 2px;">
                                 <span style="font-weight: 600; color: #007bff;">${targetTz}:</span> ${convertedTime}
                               </span>`;
                });

                resultsDiv.innerHTML = output;

            } catch (error) {
                console.error("Time conversion error:", error);
                resultsDiv.innerHTML = `<span style="color: #dc3545; font-weight: bold;">Error converting time: Invalid input or unknown timezone. (${error.message || error})</span>`;
            }
        });

    } else {
        // If the overlay already exists, simply re-append to ensure it's on top
        // No animation reset or re-application needed
        document.body.appendChild(overlay);
    }
}