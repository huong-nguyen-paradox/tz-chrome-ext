
// --- 2. background.js ---
// This is the service worker script.
// It listens for when the extension icon is clicked, then injects the UI and logic
// for the timezone converter into the active tab.

console.log("Background script has started to load for Timezone Converter!");

// Listen for clicks on the extension's toolbar icon
chrome.action.onClicked.addListener((tab) => {
    console.log('Extension icon clicked on tab.id = ', tab.id, 'tab.url = ', tab.url);

    // Execute the function that creates/manages the timezone converter overlay
    chrome.scripting.executeScript(
        {
            target: {tabId: tab.id },
            function: createOrUpdateTimeConverterOverlay // This function will be injected and run on the page
        },
        (injectionResults) => {
            if (chrome.runtime.lastError) {
                console.error('Script injection failed:', chrome.runtime.lastError.message);
                return;
            }
            console.log('Timezone converter script injected into tab:', tab.id);
            // No result is expected back from this injection as it directly manipulates the DOM
        }
    );
});

// This function will be executed in the context of the webpage (content script's isolated world).
// It creates or updates the timezone converter overlay.
function createOrUpdateTimeConverterOverlay() {
    const OVERLAY_ID = 'extension-timezone-converter-overlay';
    const TIME_INPUT_ID = OVERLAY_ID + '-time-input';
    const SOURCE_TZ_SELECT_ID = OVERLAY_ID + '-source-tz-select';
    const CONVERT_BUTTON_ID = OVERLAY_ID + '-convert-btn';
    const RESULTS_AREA_ID = OVERLAY_ID + '-results';
    const CLOSE_BUTTON_ID = OVERLAY_ID + '-close-btn';

    let overlay = document.getElementById(OVERLAY_ID);

    // List of common IANA timezones (you can expand this)
    const timezones = [
        "America/New_York",
        "America/Chicago",
        "America/Los_Angeles",
        "Europe/London",
        "Europe/Berlin",
        "Asia/Tokyo",
        "Asia/Shanghai",
        "Australia/Sydney",
        "UTC"
    ];

    if (!overlay) {
        // If it doesn't exist, create it
        overlay = document.createElement('div');
        overlay.id = OVERLAY_ID;
        overlay.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            width: 350px; /* Slightly wider for the converter */
            max-width: 95vw; /* Responsive width */
            background-color: #ffffff;
            border: 1px solid #e0e0e0;
            border-radius: 12px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            padding: 20px;
            z-index: 2147483647; /* High z-index to ensure it's on top */
            font-family: 'Inter', sans-serif;
            color: #333;
            animation: fadeIn 0.3s ease-out forwards;
            display: flex;
            flex-direction: column;
            gap: 15px;
            box-sizing: border-box; /* Include padding in width */
        `;

        // Add a style block for animations if not already present
        if (!document.getElementById('extension-overlay-styles')) {
            const style = document.createElement('style');
            style.id = 'extension-overlay-styles';
            style.textContent = `
                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(-20px); }
                    to { opacity: 1; transform: translateY(0); }
                }
                @keyframes fadeOut {
                    from { opacity: 1; transform: translateY(0); }
                    to { opacity: 0; transform: translateY(-20px); }
                }
                /* Basic styling for inputs and buttons */
                #${OVERLAY_ID} input[type="text"],
                #${OVERLAY_ID} select {
                    width: 100%;
                    padding: 10px;
                    border: 1px solid #ccc;
                    border-radius: 6px;
                    box-sizing: border-box;
                    font-family: 'Inter', sans-serif;
                    font-size: 0.95em;
                }
                #${OVERLAY_ID} button {
                    background-color: #007bff; /* Blue button */
                    color: white;
                    border: none;
                    padding: 10px 15px;
                    border-radius: 6px;
                    cursor: pointer;
                    font-size: 1em;
                    transition: background-color 0.2s ease, transform 0.1s ease;
                    display: block; /* Full width for the button */
                    width: 100%;
                    box-sizing: border-box;
                }
                #${OVERLAY_ID} button:hover {
                    background-color: #0056b3;
                    transform: translateY(-1px);
                }
                #${OVERLAY_ID} button:active {
                    transform: translateY(0);
                }
            `;
            document.head.appendChild(style);
        }

        // Add header
        const header = document.createElement('h3');
        header.textContent = 'Timezone Converter';
        header.style.cssText = `
            margin: 0;
            color: #4a5568;
            font-size: 1.3em;
            text-align: left;
            padding-right: 30px; /* Space for close button */
            margin-bottom: 10px;
        `;
        overlay.appendChild(header);

        // Add close button
        const closeButton = document.createElement('button');
        closeButton.id = CLOSE_BUTTON_ID;
        closeButton.textContent = 'X';
        closeButton.style.cssText = `
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            font-size: 1.2em;
            cursor: pointer;
            color: #888;
            padding: 5px;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s ease, color 0.2s ease;
        `;
        closeButton.onmouseover = () => {
             closeButton.style.backgroundColor = '#f0f0f0';
             closeButton.style.color = '#333';
        };
        closeButton.onmouseout = () => {
             closeButton.style.backgroundColor = 'none';
             closeButton.style.color = '#888';
        };
        closeButton.onclick = () => {
            overlay.style.animation = 'fadeOut 0.3s ease-out forwards';
            overlay.addEventListener('animationend', () => overlay.remove(), { once: true });
        };
        overlay.appendChild(closeButton);

        // --- Input Section ---
        const inputSection = document.createElement('div');
        inputSection.style.cssText = `
            display: flex;
            flex-direction: column;
            gap: 10px;
            width: 100%;
        `;

        // Time Input
        const timeLabel = document.createElement('label');
        timeLabel.textContent = 'Time:';
        timeLabel.htmlFor = TIME_INPUT_ID;
        timeLabel.style.fontSize = '0.9em';
        timeLabel.style.color = '#555';
        inputSection.appendChild(timeLabel);

        const timeInput = document.createElement('input');
        timeInput.type = 'text'; // Can use 'time' type for browser picker, but 'text' allows more flexible input like '9 AM'
        timeInput.id = TIME_INPUT_ID;
        timeInput.placeholder = 'e.g., 9:00 AM or 14:30';
        inputSection.appendChild(timeInput);

        // Source Timezone Select
        const sourceTzLabel = document.createElement('label');
        sourceTzLabel.textContent = 'From Timezone:';
        sourceTzLabel.htmlFor = SOURCE_TZ_SELECT_ID;
        sourceTzLabel.style.fontSize = '0.9em';
        sourceTzLabel.style.color = '#555';
        inputSection.appendChild(sourceTzLabel);

        const sourceTzSelect = document.createElement('select');
        sourceTzSelect.id = SOURCE_TZ_SELECT_ID;
        timezones.forEach(tz => {
            const option = document.createElement('option');
            option.value = tz;
            option.textContent = tz;
            sourceTzSelect.appendChild(option);
        });
        // Attempt to pre-select local timezone
        try {
            const localTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
            if (timezones.includes(localTimeZone)) {
                sourceTzSelect.value = localTimeZone;
            }
        } catch (e) {
            console.warn("Could not determine local timezone:", e);
        }

        inputSection.appendChild(sourceTzSelect);
        overlay.appendChild(inputSection);

        // Convert Button
        const convertButton = document.createElement('button');
        convertButton.id = CONVERT_BUTTON_ID;
        convertButton.textContent = 'Convert Time';
        overlay.appendChild(convertButton);

        // --- Results Section ---
        const resultsArea = document.createElement('div');
        resultsArea.id = RESULTS_AREA_ID;
        resultsArea.style.cssText = `
            background-color: #f8f8f8;
            border: 1px solid #eee;
            padding: 15px;
            border-radius: 8px;
            min-height: 80px;
            max-height: 250px;
            overflow-y: auto;
            text-align: left;
            word-wrap: break-word;
            font-size: 0.95em;
            line-height: 1.6;
            color: #555;
            flex-grow: 1;
        `;
        resultsArea.innerHTML = 'Enter time and click Convert.';
        overlay.appendChild(resultsArea);

        document.body.appendChild(overlay);

        // --- Event Listener for Conversion ---
        convertButton.addEventListener('click', () => {
            const inputTime = timeInput.value.trim();
            const sourceTz = sourceTzSelect.value;
            const resultsDiv = document.getElementById(RESULTS_AREA_ID);

            if (!inputTime) {
                resultsDiv.innerHTML = '<span style="color: #dc3545; font-weight: bold;">Please enter a time to convert.</span>';
                return;
            }

            resultsDiv.innerHTML = 'Converting...<br>'; // Clear previous results and show loading

            try {
                // Combine today's date with the input time
                const now = new Date();
                const today = now.getFullYear() + '-' +
                              String(now.getMonth() + 1).padStart(2, '0') + '-' +
                              String(now.getDate()).padStart(2, '0');
                const dateTimeString = `${today} ${inputTime}`;

                // Try to parse the input time in the source timezone
                // This is tricky as Date() parsing is locale-dependent.
                // A robust solution would use a library, but for basic cases, this can work.
                // It's better to force a parse that assumes a common format first.
                // For simplicity, let's just create a Date object and set its timezone later.
                // For robust parsing, especially '9:00 AM', a library is recommended.
                // Here, we'll try to convert based on the browser's understanding first,
                // then format to target timezones.

                // Using Intl.DateTimeFormat for robust time parsing and formatting
                const sourceTimeFormatter = new Intl.DateTimeFormat('en-US', {
                    year: 'numeric',
                    month: 'numeric',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit',
                    hour12: false, // Ensure 24-hour parsing if input like '14:30'
                    timeZone: sourceTz
                });

                // Create a date object relative to the source timezone.
                // This is a common way to handle specific time in a specific timezone
                // without manipulating the Date object directly which is always UTC internally.
                // The key is to parse the input string based on the SOURCE timezone.
                // Simple Date.parse() is unreliable.
                // We'll construct a date object and then force its interpretation.
                // For the purpose of this example, let's assume a basic `HH:MM` or `HH:MM AM/PM`
                // and parse it using a temporary Date object with local timezone,
                // then shift it to represent the source timezone's time.

                let baseDate = new Date(); // Start with current date

                // Simple parsing for HH:MM or HH:MM AM/PM
                const [timePart, ampmPart] = inputTime.toUpperCase().split(/(AM|PM)/i);
                let [hours, minutes] = timePart.split(':').map(Number);

                if (isNaN(hours) || isNaN(minutes)) {
                    resultsDiv.innerHTML = '<span style="color: #dc3545; font-weight: bold;">Invalid time format. Please use HH:MM or HH:MM AM/PM.</span>';
                    return;
                }

                if (ampmPart && ampmPart.includes('PM') && hours < 12) {
                    hours += 12;
                } else if (ampmPart && ampmPart.includes('AM') && hours === 12) {
                    hours = 0; // 12 AM is 00:00
                }

                baseDate.setHours(hours, minutes, 0, 0);

                // Now, convert this baseDate (which is in local timezone)
                // to a string in the source timezone, then parse that string
                // to get a new date object that *represents* the input time in the source timezone.
                // This is a common workaround for reliable timezone parsing with native JS.

                const formattedBaseDateInSourceTZ = new Intl.DateTimeFormat('en-US', {
                    year: 'numeric',
                    month: 'numeric',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false, // Force 24-hour output
                    timeZone: sourceTz
                }).format(baseDate);

                // This is still tricky with just native Date objects for *setting* a date
                // based on a timezone. A robust method would use a library like Luxon or Moment.js.
                // For a simpler example without external libraries, we'll assume the user
                // provides a time that can be interpreted locally, and then we'll format it
                // into other timezones.

                // Let's refine: The `baseDate` is a Date object. Its internal value is UTC milliseconds
                // since epoch. When we display it, it uses the browser's local timezone *by default*.
                // To convert, we don't change the Date object itself, but *how we format it*.

                let output = `<b>Input Time (${sourceTz}): ${inputTime}</b><br><br><b>Converted Times:</b><br>`;

                timezones.forEach(targetTz => {
                    if (targetTz === sourceTz) return; // Don't convert to same timezone

                    const options = {
                        hour: '2-digit',
                        minute: '2-digit',
                        second: '2-digit',
                        hour12: true,
                        timeZoneName: 'short',
                        timeZone: targetTz
                    };
                    const formatter = new Intl.DateTimeFormat('en-US', options); // Using en-US locale for consistent format

                    // Format the *same* baseDate object but with the target timezone's formatter
                    const convertedTime = formatter.format(baseDate);
                    output += `${targetTz}: ${convertedTime}<br>`;
                });

                resultsDiv.innerHTML = output;

            } catch (error) {
                console.error("Time conversion error:", error);
                resultsDiv.innerHTML = `<span style="color: #dc3545; font-weight: bold;">Error converting time. Please check your input. (${error.message})</span>`;
            }
        });

    } else {
        // If the overlay already exists, reset its animation and ensure visibility
        overlay.style.animation = 'none';
        overlay.offsetHeight; // Trigger reflow to apply reset
        overlay.style.animation = 'fadeIn 0.3s ease-out forwards';

        document.body.appendChild(overlay); // Re-append to ensure it's on top
    }
}
